name: build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  check-secret:
    runs-on: ubuntu-latest
    outputs:
      has-password: ${{ steps.has-password.outputs.defined }}
    steps:
      - id: has-password
        if: "${{ env.KSP_ZIP_PASSWORD != '' }}"
        run: echo "::set-output name=defined::true"
        env:
            KSP_ZIP_PASSWORD: ${{ secrets.KSP_ZIP_PASSWORD }}
  validate-cfg-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Validate config files
        uses: KSP-CKAN/KSPMMCfgParser@master
  build:
    runs-on: ubuntu-latest
    needs: [check-secret]
    if: needs.check-secret.outputs.has-password == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 100
      - name: Download required assemblies
        id: download-assemblies
        shell: bash
        env:
          KSP_ZIP_PASSWORD: ${{ secrets.KSP_ZIP_PASSWORD }}
        run: |
          curl https://ksp-ro.s3-us-west-2.amazonaws.com/KSPAssemblies-1.12.zip --output /tmp/bins.zip
          KSP_DLL_PATH="/opt/ksp/assembly"
          echo "::set-output name=ksp-dll-path::${KSP_DLL_PATH}"
          mkdir -p "${KSP_DLL_PATH}"
          unzip -P "${KSP_ZIP_PASSWORD}" '/tmp/bins.zip' -d "${KSP_DLL_PATH}"
          rm '/tmp/bins.zip'

      - name: Build mod solution
        run: |
          rm -f ${GITHUB_WORKSPACE}/GameData/RealAntennas/Plugins/*.dll
          msbuild /p:Configuration=Release /p:ReferencePath="${{ steps.download-assemblies.outputs.ksp-dll-path }}" ${GITHUB_WORKSPACE}/src/RealAntennasProject.sln

      #- name: Remove excess DLLs
      #  uses: KSP-RO/BuildTools/remove-excess-dlls@master
      #  with:
      #    path: ${GITHUB_WORKSPACE}/GameData/

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.0

      - name: Build metadata
        shell: bash
        run: |
          python ${GITHUB_WORKSPACE}/makeMeta.py 2.0.0.0

      - name: Assemble release
        id: assemble-release
        run: |
          RELEASE_DIR="${RUNNER_TEMP}/release"
          echo "Release dir: ${RELEASE_DIR}"
          mkdir -v "${RELEASE_DIR}"
          echo "::set-output name=release-dir::${RELEASE_DIR}"
          cp -v -R "${GITHUB_WORKSPACE}/GameData" "${RELEASE_DIR}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: RealAntennas
          path: ${{ steps.assemble-release.outputs.release-dir }}